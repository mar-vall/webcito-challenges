---
import RepositoryInfo from '../components/RepositoryInfo.astro';
import type { GithubRepository } from '../interfaces/github-repository';

let repos: GithubRepository[] = [];
let error: string | null = null;

try {
  const response = await fetch('https://api.github.com/users/devferx/repos');
  
  if (!response.ok) {
    throw new Error(`Error HTTP: ${response.status}`);
  }
  
  const data = await response.json();
  
  repos = data.map((repo: any) => ({
    name: repo.name,
    visibility: repo.visibility,
    description: repo.description,
    forks_count: repo.forks_count,
    language: repo.language,
    topics: repo.topics || [],
    updated_at: repo.updated_at,
    stargazers_count: repo.stargazers_count,
    html_url: repo.html_url
  })).sort((a: GithubRepository, b: GithubRepository) => 
    new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()
  );
} catch (err: any) {
  error = err.message;
}
---

<main class="col-span-4 lg:pl-10 text-text-primary">
  <h4 class="text-xl font-semibold leading-normal tracking-wide">
    Repositories ({repos.length})
  </h4>
  <section class="py-4 xl:flex xl:flex-row gap-4">
    <input type="text" class="border rounded-lg w-full lg:basis-2/3" />
    <div class="lg:basis-1/2">
      <select name="Type" id="" class="rounded-lg bg-btn-primary p-2 outline-btn-border">
        <option value="all" class="">All</option>
        <option value="all">Sources</option>
        <option value="all">Archived</option>
        <option value="all">Mirrors</option>
      </select>
      <select name="Language" id="" class="rounded-lg bg-btn-primary p-2 outline-btn-border">
        <option value="all" class="">All</option>
        <option value="all">javascrip</option>
        <option value="all">Archived</option>
        <option value="all">Mirrors</option>
      </select>
      <select name="Sort" id="" class="rounded-lg bg-btn-primary p-2 outline-btn-border">
        <option value="all" class="">All</option>
        <option value="all">Sources</option>
        <option value="all">Archived</option>
        <option value="all">Mirrors</option>
      </select>
    </div>
  </section>
  <hr class="mt-2 mb-5" />
  {error ? (
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
      Error al cargar repositorios: {error}
    </div>
  ) : repos.length === 0 ? (
    <p>No se encontraron repositorios</p>
  ) : (
    repos.map(repo => (
        <RepositoryInfo
          repo={{
            name: repo.name,
            visibility: repo.visibility,
            description: repo.description,
            forksCount: repo.forks_count,
            language: repo.language,
            topics: repo.topics,
            updatedAt: repo.updated_at,
            stargazersCount: repo.stargazers_count,
            url: repo.html_url
          }}
        />
      ))
  )}
</main>
