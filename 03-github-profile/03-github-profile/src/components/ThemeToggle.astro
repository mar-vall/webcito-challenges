---
// src/components/ThemeToggle.astro
const { iconSize = 'text-2xl' } = Astro.props;
---

<button 
  class={`p-2 rounded-full ${iconSize}`}
  id="themeToggle"
  aria-label="Toggle dark mode"
>
  <span id="themeIcon">‚òÄÔ∏è</span>
</button>

<script>
// Usamos Astro.globals para manejar el estado si es necesario
document.addEventListener('DOMContentLoaded', () => {
  const toggle = document.getElementById('themeToggle');
  const icon = document.getElementById('themeIcon');
  
  // Funci√≥n para aplicar el tema
  const applyTheme = (isDark : boolean) => {
    document.documentElement.classList.toggle('dark', isDark);
    if (icon) {
        icon.textContent = isDark ? 'üåô' : '‚òÄÔ∏è';
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
    }
  };

  // Verificar tema al cargar
  const savedTheme = localStorage.getItem('theme');
  const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  const initialTheme = savedTheme ? savedTheme === 'dark' : systemPrefersDark;
  
  applyTheme(initialTheme);

  // Manejar el click
  if(toggle){
      toggle.addEventListener('click', () => {
        const isDark = !document.documentElement.classList.contains('dark');
        applyTheme(isDark);
      });
  }

  // Escuchar cambios en las preferencias del sistema
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
    if (!localStorage.getItem('theme')) {
      applyTheme(e.matches);
    }
  });
});
</script>